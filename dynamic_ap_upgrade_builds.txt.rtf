{\rtf1\fbidis\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fmodern JetBrains Mono;}{\f1\fnil\fcharset1 Segoe UI Symbol;}{\f2\fnil\fcharset1 Segoe UI Symbol;}{\f3\fnil\fcharset1 Segoe UI Emoji;}{\f4\fnil\fcharset1 Segoe UI Emoji;}{\f5\fnil\fcharset0 Calibri;}}
{\colortbl ;\red0\green51\blue179;\red8\green8\blue8;\red140\green140\blue140;\red6\green125\blue23;\red0\green0\blue255;\red0\green98\blue122;\red0\green0\blue0;\red0\green55\blue166;\red102\green0\blue153;\red0\green0\blue128;\red23\green80\blue235;\red255\green255\blue255;}
{\*\generator Riched20 10.0.22621}\viewkind4\uc1 
\pard\box\brdrdash\brdrw0 \cbpat12\sa200\sl276\slmult1\cf1\f0\fs20\lang9 import \cf2 requests\line\cf1 import \cf2 json\line\cf1 import \cf2 urllib3\line\cf1 from \cf2 tabulate \cf1 import \cf2 tabulate  \cf3\i # Import tabulate for table formatting\line\cf1\i0 import \cf2 time\line\line\cf3\i # Suppress SSL warnings\line\cf2\i0 urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\line\line\cf3\i # Standard variables\line # Standard variables\line\cf2\i0 MIST_API_TOKEN = \cf4 "ghh"\line\cf2 MIST_BASE_URL = \cf4 "{{\field{\*\fldinst{HYPERLINK https://api.mist.com/api/v1 }}{\fldrslt{https://api.mist.com/api/v1\ul0\cf0}}}}\f0\fs20 "\line\cf2 ORG_ID = \cf4 "hjjjgjgj"\line\cf3\i # List of sites and their names\line\cf2\i0 SITES = \{\line     \cf4 "USTEST03 - San Mateo"\cf2 : \cf1 None\cf2 ,  \cf3\i # Site ID will be fetched dynamically\line     \cf4\i0 "USTEST04 - San Mateo"\cf2 : \cf1 None\line\cf2\}\line\line\cf3\i # Target OS version\line\cf2\i0 OS_VERSION = \cf4 "0.12.27374"  \cf3\i # Replace with the desired OS version\line\line\line # Function to get all sites\line\cf1\i0 def \cf6 get_sites\cf2 (\cf7 org_id\cf2 , \cf7 api_token\cf2 ):\line     \cf7 url \cf2 = \cf4 f"\cf8\{\cf2 MIST_BASE_URL\cf8\}\cf4 /orgs/\cf8\{\cf7 org_id\cf8\}\cf4 /sites"\line     \cf7 headers \cf2 = \{\line         \cf4 "Authorization"\cf2 : \cf4 f"Token \cf8\{\cf7 api_token\cf8\}\cf4 "\cf2 ,\line         \cf4 "Content-Type"\cf2 : \cf4 "application/json"\line     \cf2\}\line     \cf1 try\cf2 :\line         \cf7 response \cf2 = requests.get(\cf7 url\cf2 , \cf9 headers\cf2 =\cf7 headers\cf2 , \cf9 verify\cf2 =\cf1 False\cf2 )\line         \cf7 response\cf2 .raise_for_status()\line         \cf1 return \cf7 response\cf2 .json()\line     \cf1 except \cf2 requests.exceptions.RequestException \cf1 as \cf7 e\cf2 :\line         \cf10 print\cf2 (\cf4 f"API request failed while fetching sites: \cf8\{\cf7 e\cf8\}\cf4 "\cf2 )\line         \cf1 return None\line\line\line\cf3\i # Function to get available versions for devices in a site\line\cf1\i0 def \cf6 get_available_versions\cf2 (\cf7 site_id\cf2 , \cf7 api_token\cf2 , \cf7 model\cf2 =\cf1 None\cf2 ):\line     \cf7 url \cf2 = \cf4 f"\cf8\{\cf2 MIST_BASE_URL\cf8\}\cf4 /sites/\cf8\{\cf7 site_id\cf8\}\cf4 /devices/versions"\line     \cf7 headers \cf2 = \{\line         \cf4 "Authorization"\cf2 : \cf4 f"Token \cf8\{\cf7 api_token\cf8\}\cf4 "\cf2 ,\line         \cf4 "Content-Type"\cf2 : \cf4 "application/json"\line     \cf2\}\line     \cf1 try\cf2 :\line         \cf7 response \cf2 = requests.get(\cf7 url\cf2 , \cf9 headers\cf2 =\cf7 headers\cf2 , \cf9 verify\cf2 =\cf1 False\cf2 )\line         \cf7 response\cf2 .raise_for_status()\line\line         \cf7 available_versions \cf2 = \cf7 response\cf2 .json()\line         \cf10 print\cf2 (\cf4 "Raw response for available versions:"\cf2 , \cf7 available_versions\cf2 )\line\line         \cf3\i # Filter available versions by model if specified\line         \cf1\i0 if \cf7 model\cf2 :\line             \cf7 available_versions \cf2 = [\line                 \cf7 version \cf1 for \cf7 version \cf1 in \cf7 available_versions \cf1 if \cf7 version\cf2 .get(\cf4 'model'\cf2 ) == \cf7 model\line             \cf2 ]\line\line         \cf3\i # Extract version numbers and sort\line         \cf1\i0 if \cf7 available_versions\cf2 :\line             \cf7 versions \cf2 = [\cf7 version\cf2 [\cf4 'version'\cf2 ] \cf1 for \cf7 version \cf1 in \cf7 available_versions\cf2 ]\line             \cf7 sorted_versions \cf2 = \cf10 sorted\cf2 (\cf7 versions\cf2 , \cf9 key\cf2 =\cf1 lambda \cf7 v\cf2 : \cf10 tuple\cf2 (\cf10 map\cf2 (\cf10 int\cf2 , v.split(\cf4 '.'\cf2 ))), \cf9 reverse\cf2 =\cf1 True\cf2 )\line\line             \cf3\i # Return the sorted versions\line             \cf1\i0 return \cf7 sorted_versions\line\line         \cf1 return \cf2 []\line     \cf1 except \cf2 requests.exceptions.RequestException \cf1 as \cf7 e\cf2 :\line         \cf10 print\cf2 (\cf4 f"API request failed while fetching available versions: \cf8\{\cf7 e\cf8\}\cf4 "\cf2 )\line         \cf1 return \cf2 []\line\line\line\cf3\i # Function to get device details for a site\line\cf1\i0 def \cf6 get_device_details\cf2 (\cf7 site_id\cf2 , \cf7 api_token\cf2 ):\line     \cf7 url \cf2 = \cf4 f"\cf8\{\cf2 MIST_BASE_URL\cf8\}\cf4 /sites/\cf8\{\cf7 site_id\cf8\}\cf4 /stats/devices?type=ap"\line     \cf7 headers \cf2 = \{\line         \cf4 "Authorization"\cf2 : \cf4 f"Token \cf8\{\cf7 api_token\cf8\}\cf4 "\cf2 ,\line         \cf4 "Content-Type"\cf2 : \cf4 "application/json"\line     \cf2\}\line     \cf1 try\cf2 :\line         \cf7 response \cf2 = requests.get(\cf7 url\cf2 , \cf9 headers\cf2 =\cf7 headers\cf2 , \cf9 verify\cf2 =\cf1 False\cf2 )\line         \cf7 response\cf2 .raise_for_status()\line         \cf1 return \cf7 response\cf2 .json()\line     \cf1 except \cf2 requests.exceptions.RequestException \cf1 as \cf7 e\cf2 :\line         \cf10 print\cf2 (\cf4 f"API request failed while fetching device details: \cf8\{\cf7 e\cf8\}\cf4 "\cf2 )\line         \cf1 return None\line\line\line\cf3\i # Function to upgrade AP firmware\line\cf1\i0 def \cf6 upgrade_ap_firmware\cf2 (\cf7 site_id\cf2 , \cf7 device_ids\cf2 , \cf7 api_token\cf2 , \cf7 version\cf2 ):\line     \cf1 if not \cf7 device_ids\cf2 :\line         \cf10 print\cf2 (\cf4 "No eligible devices for upgrade. Skipping request."\cf2 )\line         \cf1 return False\line\line     \cf7 url \cf2 = \cf4 f"\cf8\{\cf2 MIST_BASE_URL\cf8\}\cf4 /sites/\cf8\{\cf7 site_id\cf8\}\cf4 /devices/upgrade"\line     \cf7 headers \cf2 = \{\line         \cf4 "Authorization"\cf2 : \cf4 f"Token \cf8\{\cf7 api_token\cf8\}\cf4 "\cf2 ,\line         \cf4 "Content-Type"\cf2 : \cf4 "application/json"\line     \cf2\}\line     \cf7 payload \cf2 = \{\line         \cf4 "version"\cf2 : \cf7 version\cf2 ,\line         \cf4 "device_ids"\cf2 : \cf7 device_ids\cf2 ,\line         \cf4 "strategy"\cf2 : \cf4 "canary"\cf2 ,\line         \cf4 "canary_phases"\cf2 : [\cf11 5\cf2 , \cf11 25\cf2 , \cf11 50\cf2 , \cf11 100\cf2 ],\line         \cf4 "max_failures"\cf2 : [\cf11 1\cf2 , \cf11 1\cf2 , \cf11 5\cf2 , \cf11 5\cf2 ],\line         \cf4 "enable_p2p"\cf2 : \cf1 True\cf2 ,\line         \cf4 "p2p_parallelism"\cf2 : \cf11 2\cf2 ,\line         \cf4 "p2p_cluster_size"\cf2 : \cf11 10\cf2 ,\line         \cf4 "reboot"\cf2 : \cf1 True\cf2 ,\line         \cf4 "force"\cf2 : \cf1 True\line     \cf2\}\line\line     \cf1 try\cf2 :\line         \cf7 response \cf2 = requests.post(\cf7 url\cf2 , \cf9 headers\cf2 =\cf7 headers\cf2 , \cf9 json\cf2 =\cf7 payload\cf2 , \cf9 verify\cf2 =\cf1 False\cf2 )\line         \cf7 response\cf2 .raise_for_status()\line         \cf10 print\cf2 (\cf4 f"\f1\u9989?\f0  Upgrade triggered successfully for Site ID \cf8\{\cf7 site_id\cf8\}\cf4 "\cf2 )\line         \cf1 return True\line     except \cf2 requests.exceptions.HTTPError \cf1 as \cf7 http_err\cf2 :\line         \cf10 print\cf2 (\cf4 f"\f1\u10060?\f0  HTTP Error: \cf8\{\cf7 http_err\cf8\}\cf4 "\cf2 )\line         \cf10 print\cf2 (\cf4 f"\f1\u10060?\f0  Response Content: \cf8\{\cf7 response\cf2 .text\cf8\}\cf4 "\cf2 )\line         \cf1 return False\line     except \cf2 requests.exceptions.RequestException \cf1 as \cf7 e\cf2 :\line         \cf10 print\cf2 (\cf4 f"\f1\u10060?\f0  API request failed while triggering upgrade for Site ID \cf8\{\cf7 site_id\cf8\}\cf4 : \cf8\{\cf7 e\cf8\}\cf4 "\cf2 )\line         \cf1 return False\line\line\line\cf3\i # Function to check if all devices are upgraded and connected\line\cf1\i0 def \cf6 check_upgrade_status\cf2 (\cf7 site_id\cf2 , \cf7 api_token\cf2 , \cf7 device_ids\cf2 ):\line     \cf3\i # Poll devices for status after the upgrade\line     \cf10\i0 print\cf2 (\cf4 "Verifying upgrade status..."\cf2 )\line     \cf1 for \cf7 attempt \cf1 in \cf10 range\cf2 (\cf11 5\cf2 ):  \cf3\i # Retry a few times, increasing the wait time\line         \cf7\i0 devices \cf2 = get_device_details(\cf7 site_id\cf2 , \cf7 api_token\cf2 )\line         \cf1 if \cf7 devices\cf2 :\line             \cf7 all_upgraded \cf2 = \cf1 True\line             for \cf7 device \cf1 in \cf7 devices\cf2 :\line                 \cf7 device_id \cf2 = \cf7 device\cf2 .get(\cf4 'id'\cf2 )\line                 \cf1 if \cf7 device_id \cf1 in \cf7 device_ids\cf2 :\line                     \cf7 firmware_version \cf2 = \cf7 device\cf2 .get(\cf4 'version'\cf2 , \cf4 'N/A'\cf2 )\line                     \cf7 ap_status \cf2 = \cf7 device\cf2 .get(\cf4 'status'\cf2 , \cf4 'N/A'\cf2 )\line                     \cf1 if \cf7 firmware_version \cf2 != OS_VERSION \cf1 or \cf7 ap_status \cf2 != \cf4 'connected'\cf2 :\line                         \cf7 all_upgraded \cf2 = \cf1 False\line                         \cf10 print\cf2 (\cf4 f"\f1\u10060?\f0  Device \cf8\{\cf7 device_id\cf8\}\cf4  failed to upgrade or is not connected."\cf2 )\line             \cf1 if \cf7 all_upgraded\cf2 :\line                 \cf10 print\cf2 (\cf4 "\f1\u9989?\f0  All devices upgraded successfully and are online."\cf2 )\line                 \cf1 return True\line         \cf10 print\cf2 (\cf4 f"\f2\u-10179?\u-8956?\f0  Retrying in 3 minutes... (Attempt \cf8\{\cf7 attempt \cf2 + \cf11 1\cf8\}\cf4 /5)"\cf2 )\line         time.sleep(\cf11 180\cf2 )  \cf3\i # Wait 3 minutes before retrying\line\line\line # Main execution\line\cf1\i0 if \cf2 __name__ == \cf4 "__main__"\cf2 :\line     \cf10 print\cf2 (\cf4 "Fetching all sites...\cf8\\n\cf4 "\cf2 )\line     sites = get_sites(ORG_ID, MIST_API_TOKEN)\line\line     \cf1 if not \cf2 sites:\line         \cf10 print\cf2 (\cf4 "Failed to fetch sites. Exiting."\cf2 )\line         \cf10 exit\cf2 ()\line\line     \cf1 for \cf2 site_name \cf1 in \cf2 SITES.keys():\line         target_site = \cf10 next\cf2 ((site \cf1 for \cf2 site \cf1 in \cf2 sites \cf1 if \cf2 site[\cf4 "name"\cf2 ].lower() == site_name.lower()), \cf1 None\cf2 )\line         \cf1 if \cf2 target_site:\line             SITES[site_name] = target_site[\cf4 "id"\cf2 ]\line         \cf1 else\cf2 :\line             \cf10 print\cf2 (\cf4 f"Site '\cf8\{\cf2 site_name\cf8\}\cf4 ' not found. Skipping."\cf2 )\line\line     \cf1 for \cf2 site_name, site_id \cf1 in \cf2 SITES.items():\line         \cf1 if \cf2 site_id:\line             \cf10 print\cf2 (\cf4 f"\cf8\\n\cf4 ===== \f2\u-10179?\u-9011?\f0  Site Name: \cf8\{\cf2 site_name\cf8\}\cf4  | Site ID: \cf8\{\cf2 site_id\cf8\}\cf4  =====\cf8\\n\cf4 "\cf2 )\line\line             \cf3\i # Get available versions dynamically, specifying model\line             \cf2\i0 model_type = \cf4 "AP43"  \cf3\i # For your case, specify AP43 model here\line             \cf2\i0 available_versions = get_available_versions(site_id, MIST_API_TOKEN, \cf9 model\cf2 =model_type)\line\line             \cf1 if \cf2 available_versions:\line                 \cf1 if \cf10 len\cf2 (available_versions) >= \cf11 2\cf2 :\line                     latest_version = available_versions[\cf11 0\cf2 ]\line                     latest_1_version = available_versions[\cf11 1\cf2 ]\line                     \cf10 print\cf2 (\cf4 f"\f1\u9989?\f0  Latest-1 firmware version for upgrade: \cf8\{\cf2 latest_1_version\cf8\}\cf4 "\cf2 )\line                     OS_VERSION = latest_1_version  \cf3\i # Update OS_VERSION to Latest-1 version\line\line             \cf2\i0 devices = get_device_details(site_id, MIST_API_TOKEN)\line             device_ids = []\line             table_data = []\line\line             \cf1 if \cf2 devices:\line                 \cf1 for \cf2 device \cf1 in \cf2 devices:\line                     device_name = device.get(\cf4 'name'\cf2 , \cf4 'N/A'\cf2 )\line                     model = device.get(\cf4 'model'\cf2 , \cf4 'N/A'\cf2 )\line                     firmware_version = device.get(\cf4 'version'\cf2 , \cf4 'N/A'\cf2 )\line                     device_id = device.get(\cf4 'id'\cf2 , \cf4 'N/A'\cf2 )\line                     ap_ip = device.get(\cf4 'ip'\cf2 , \cf4 'N/A'\cf2 )  \cf3\i # Get AP IP Address\line                     \cf2\i0 ap_status = \cf4 "\f3\u-10179?\u-8222?\f0  Connected" \cf1 if \cf2 device.get(\cf4 'status'\cf2 ) == \cf4 'connected' \cf1 else \cf4 "\f2\u-10179?\u-8908?\f0  Disconnected"\line\line                     \cf1 if \cf2 firmware_version == OS_VERSION:\line                         status = \cf4 "\f1\u9989?\f0  Already on target version"\line                     \cf1 elif \cf2 firmware_version > OS_VERSION:\line                         status = \cf4 "\f4\u9888?\u-497?\f0  Newer than target (Skipping)"\line                     \cf1 else\cf2 :\line                         status = \cf4 "\f4\u11014?\u-497?\f0  Needs Upgrade"\line                         \cf2 device_ids.append(device_id)\line\line                     table_data.append([device_name, model, ap_ip, ap_status, firmware_version, OS_VERSION, status])\line\line                 \cf3\i # Print table with AP IP and Status\line                 \cf2\i0 headers = [\cf4 "Device Name"\cf2 , \cf4 "Model"\cf2 , \cf4 "AP IP"\cf2 , \cf4 "Status"\cf2 , \cf4 "Current Firmware"\cf2 , \cf4 "Target OS Version"\cf2 ,\line                            \cf4 "Upgrade Status"\cf2 ]\line                 \cf10 print\cf2 (tabulate(table_data, \cf9 headers\cf2 =headers, \cf9 tablefmt\cf2 =\cf4 "fancy_grid"\cf2 ))\line\line                 \cf1 if \cf2 device_ids:\line                     confirm = \cf10 input\cf2 (\line                         \cf4 f"\cf8\\n\cf4 Do you want to proceed with the OS upgrade for site '\cf8\{\cf2 site_name\cf8\}\cf4 '? Type 'yes' to continue: "\cf2 ).strip().lower()\line                     \cf1 if \cf2 confirm == \cf4 "yes"\cf2 :\line                         \cf10 print\cf2 (\cf4 f"Triggering upgrade for site '\cf8\{\cf2 site_name\cf8\}\cf4 ' to OS version: \cf8\{\cf2 OS_VERSION\cf8\}\cf4 "\cf2 )\line                         \cf1 if \cf2 upgrade_ap_firmware(site_id, device_ids, MIST_API_TOKEN, OS_VERSION):\line                             \cf1 if \cf2 check_upgrade_status(site_id, MIST_API_TOKEN, device_ids):\line                                 \cf10 print\cf2 (\cf4 f"Upgrade completed successfully for site '\cf8\{\cf2 site_name\cf8\}\cf4 '.\cf8\\n\cf4 "\cf2 )\line                             \cf1 else\cf2 :\line                                 \cf10 print\cf2 (\cf4 f"Upgrade failed for site '\cf8\{\cf2 site_name\cf8\}\cf4 '. Exiting."\cf2 )\line                                 \cf10 exit\cf2 ()\line                         \cf1 else\cf2 :\line                             \cf10 print\cf2 (\cf4 f"Upgrade failed to trigger for site '\cf8\{\cf2 site_name\cf8\}\cf4 '. Exiting."\cf2 )\line                             \cf10 exit\cf2 ()\line                     \cf1 else\cf2 :\line                         \cf10 print\cf2 (\cf4 f"Upgrade canceled for site '\cf8\{\cf2 site_name\cf8\}\cf4 '."\cf2 )\line                 \cf1 else\cf2 :\line                     \cf10 print\cf2 (\cf4 f"No devices require an upgrade for site '\cf8\{\cf2 site_name\cf8\}\cf4 '.\cf8\\n\cf4 "\cf2 )\line         \cf1 else\cf2 :\line             \cf10 print\cf2 (\cf4 f"Site ID not found for site '\cf8\{\cf2 site_name\cf8\}\cf4 '. Skipping."\cf2 )\line\par

\pard\sa200\sl276\slmult1\cf0\f5\fs22\par
}
 